#!/bin/bash

# Depends:
# bin: bash cat cut sed(GNU) grep man groff
# debian: bash coreutils grep man-db groff-base
input=$(sed 's/'"'"'/\\[u0027]/g; s/`/\\[u0060]/g; s/\$/\\[u0024]/g; s/  / \\ /g' /dev/stdin)

aeten_ads_init() {
	local args=${@}
	__aeten_ads_man_section name "${input}"
	cat - << EOF
while [ \${#} -ne 0 ]; do
	case "\${1}" in
		bash_completion)
			shift
			cat - << _BEOF_ | "$0" bash_complete ${name} \$@
${input}
_BEOF_
			exit 0
			;;
		$(aeten_ads_foreach_option  __aeten_ads_parse_option ${args})
		--) shift; break;;
		$(__aeten_ads_wrong_option)
	esac
	shift
done

ads_print_usage() {
	local errcode=255
	local message

	while [ \${#} -ne 0 ]; do
		case "\${1}" in
			-e|--errcode) errcode=\${2}; shift ;;
			*)            break ;;
		esac
		shift
	done
	message="\${@}"
	[ -z "\${message}" ] || echo "\${message}" >&2
	$(readlink -f ${0}) usage "${name}" "\${errcode}" <<< '$(echo "${input}"|sed $"s/\$/\\\\x0/")'
	exit "\${errcode}"
}


$(aeten_ads_foreach_option  __aeten_ads_check_option ${args})
EOF
}

aeten_ads_foreach_option() {
	local lambda=${1}; shift
	local opt
	local option
	local short
	local value
	local requiered
	local multi
	local occurence
	local description
	local _var_prefix
	local options
	local options_plus_help
	local ifs_backup="${IFS}"
	while [ ${#} -ne 0 ]; do
		case "${1}" in
			prefix) _var_prefix="${2}"; shift;;
		esac
		shift
	done

	IFS=$'\n'
	options=$(echo "${input}"|sed '/^\s*#/d')
	options_plus_help="help: Print this help.
${options}"
	for opt in ${options_plus_help}; do
		[ -z "${opt}" ] && continue
		eval "$(cat - <<< "${opt}"|sed --regexp-extended --quiet 's/^([?*!+]?)([a-zA-Z0-9-]+)(\|([a-zA-Z0-9]))?(\s+([a-zA-Z0-9_:|<>!@/-]+))?:(\s+\\\s+)*\s*([^\s].*)/option=\2; short=\4; occurence=\1; value="\6"; description="\8"/p')"
		case "${occurence}" in
			''|'?') requiered=false; multi=false;;
			'*')    requiered=false; multi=true;;
			'+')    requiered=true;  multi=true;;
			'!')    requiered=true;  multi=false;;
		esac
		[ -z "${short}" ] && short=$(echo ${option}|cut -c 1)
		eval "${lambda}"
	done
	IFS="${ifs_backup}"
}

aeten_ads_synopsys_usage() {
	if ${requiered}; then
		printf ' -%s|--%s %s' ${short} ${option} "${value//[\/]/}"
	else
		printf ' [-%s|--%s %s]' ${short} ${option} "${value//[\/]/}"
	fi
}

aeten_ads_synopsys_man() {
	if ${requiered}; then
		printf '.B -%s|--%s\n%s\n' ${short} ${option} "$([ -n "${value}" ] && echo ".I ${value//[\/]/}")"
	else
		printf '.OP \-%s|--%s%s\n' ${short} ${option} "$([ -n "${value}" ] && echo " ${value//[\/]/}")"
	fi
}

aeten_ads_help() {
	aeten_ads_groff|man -l -
}

aeten_ads_groff() {
	local input="$(sed 's/\\x0/\n/g' /dev/stdin)"
	for section in name version title short_description description authors copyright copyleft licence license; do
		__aeten_ads_man_section ${section} "${input}"
	done

	cat - << EOF
.TH $(echo $name|tr '[:lower:]' '[:upper:]') 1 "$(date +%D)" "$name ${version}" "${title}"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.nh
.ad l
.SH NAME
.NH 1 ${name}
.PP
${name} - $(echo "${short_description}"|__aeten_ads_man_inline_style)
.SH SYNOPSYS
.
.SY ${name}
$(aeten_ads_foreach_option aeten_ads_synopsys_man)
.fi
.sp
.SH DESCRIPTION
$(echo "${description}"|__aeten_ads_man_inline_style)
.sp
.SH OPTIONS
$(aeten_ads_foreach_option __aeten_ads_man_opt)
$(test -n "${authors}" && { echo .sp; echo .SH AUTHORS; echo "${authors}"; })
$(test -n "${copyright}" && { echo .sp; echo .SH COPYRIGHT; echo "Â© ${copyright}"; })
$(test -n "${copyleft}" && { echo .sp; echo .SH COPYLEFT; echo "ðŸ„¯ ${copyleft}"; })
$(test -n "${licence}" && { echo .sp; echo .SH LICENCE; echo "${licence}"; })
$(test -n "${license}" && { echo .sp; echo .SH LICENCE; echo "${license}"; })
EOF
}

aeten_ads_usage() {
	local input="$(sed 's/\\x0/\n/g' /dev/stdin)"
	local script=${1}
	shift
	local errno=${1}
	shift
	groff -T utf8 -man << EOF | sed '/^\s*$/d;/\s*()/d;/()\s*()/d' >/dev/fd/$([ ${errno} -eq 0 ] && echo 1 || echo 2)
.TH
.SH Usage:
.SY $(basename ${script})
$(aeten_ads_foreach_option aeten_ads_synopsys_man)
EOF
	exit ${errno}
}

aeten_ads_bash_complete() {
	local cmd=$1
	cat - << EOF
_${cmd// /-}_bash_completion() {
	local completion='$(aeten_ads_foreach_option __aeten_ads_bash_completion_options)'
	local -A options

	for i in \$(seq 0 \$COMP_CWORD); do
		case "\${COMP_WORDS[\$i]}" in
$(aeten_ads_foreach_option __aeten_ads_bash_completion_option)
		esac
	done
	COMPREPLY=( \$(compgen -o nospace -W "\${completion//  / }" -- \${COMP_WORDS[COMP_CWORD]}) )
	case "\${COMP_WORDS[COMP_CWORD - 1]}" in
$(aeten_ads_foreach_option __aeten_ads_bash_completion_value)
	esac
}
complete -F "_${cmd// /-}_bash_completion" "${cmd}" $@
EOF
}

__aeten_ads_bash_completion_options() {
	echo -n "--${option} "
}

__aeten_ads_bash_completion_option() {
	${multi} && return;
	cat - << EOF
			"-${short} "|"--${option} ")
				completion=\${completion/--${option} /}
EOF
	if [ -z "${value}" ]; then
		cat - << EOF
				options+=${short}
EOF
	else
		cat - << EOF
				[ -n \"\${COMP_WORDS[\$i + 1]}\" ] && options+=${short}
EOF
	fi
	cat - << EOF
				;;
EOF
}

__aeten_ads_bash_completion_value() {
	# /* file
	# /*/ directory
	# | separates a choice
	cat - << EOF
		-${short}|--${option})
EOF
	cat - << EOF
			if [ "\$(type -t "_${cmd}_bash_complete_${option}")" = function ]; then
				_${cmd}_bash_complete_${option}
			else
EOF
	if [ -n "${value}" ] && [ -z "${value%/*/}" ]; then cat - << EOF
				# Directory
				compopt -o nospace
				COMPREPLY=( \$(compgen -W "\$([ -d "\${COMP_WORDS[COMP_CWORD]}" ] && find \${COMP_WORDS[COMP_CWORD]}* -maxdepth 0 -type d -printf '%p/\n' 2>/dev/null || find \${COMP_WORDS[COMP_CWORD]}* -maxdepth 0 -type d -printf '%p/\n' 2>/dev/null)" -- \${COMP_WORDS[COMP_CWORD]}) )
EOF
	elif [ -n "${value}" ] && [ -z "${value%/*}" ]; then cat - << EOF
				# File
				compopt -o nospace
				COMPREPLY=( \$(compgen -W "\$(find \${COMP_WORDS[COMP_CWORD]}* -maxdepth 0 \( -type d -printf '%p/ ' , -type f -print \) 2>/dev/null)" -- \${COMP_WORDS[COMP_CWORD]}) )
EOF
	elif [ -n "${value}" ] && [ -z "${value##*|*}" ]; then cat - << EOF
				# Choice
				COMPREPLY=( \$(compgen -W "${value//|/ }" -- \${COMP_WORDS[COMP_CWORD]} ) )
EOF
	else cat - << EOF
				# Other
				true
EOF
	fi
	cat - << EOF
			fi
			;;
EOF
}

__aeten_ads_wrong_option() {
		echo "-*) $(readlink -f ${0}) usage ${name} 1 <<< '$(echo "${input}"|sed $"s/\$/\\\\x0/")'; exit 1;;"
}

__aeten_ads_man_section() {
	eval "${1}=\"$(echo "${2}"|sed --quiet "s/^\\s*#\\s*$(echo "${1}"|tr '[:lower:]' '[:upper:]'):\\s*\\(.*\\)/\\1/p"|__aeten_ads_man_inline_style)\""
}

__aeten_ads_debug_option() {
	echo "$(${requiered} && echo '!')${option}|${short}$([ -z "${value}" ] || echo " ${value}"): ${description}" >&2
}

__aeten_ads_check_option() {
	local _varname
	if ${requiered}; then
		_varname=${_var_prefix}$(echo ${option}|tr '[:lower:]' '[:upper:]'|tr - _)
		echo "[ -z \${${_varname}+x} ] && { $(readlink -f ${0}) usage ${name} 1 <<< '$(echo "${input}"|sed $"s/\$/\\\\x0/")'; exit 1; };"
	fi
}

__aeten_ads_parse_option() {
	local _varname=${_var_prefix}$(echo ${option}|tr '[:lower:]' '[:upper:]'|tr - _)
	if [ help = "${option}" ]; then
		echo "-${short}|--${option}) $(readlink -f ${0}) help <<< '$(echo "${input}"|sed $"s/\$/\\\\x0/")'; exit 0;;"
	elif [ -z "${value}" ]; then
		echo "-${short}|--${option}) ${_varname}=true;;"
	else
		echo "-${short}|--${option}) [ -z "\$${_varname}" ] && ${_varname}=\"\${2}\" || ${_varname}+=(\"\${2}\"); shift;;"
	echo;
	fi
}

__aeten_ads_man_inline_style() {
	sed --regexp-extended 's/\\n/\n.br\n/g; s/\\_/\\(ul/g; s/\\\*/\\[u0042]/g; s/([^\\])?_([^_]+)_( )?/\1\\fI\2\\fR\3/g;s/([^\\])?\*([^*]+)\*( )?/\1\\fB\2\\fR\3/g; s/\\\[u0042\]/*/g; s/  / \\ /g'
}

__aeten_ads_man_opt() {
	local formated_value
	if [ -n "${value}" ]; then
		formated_value="\\ \\fI${value//[\/]/}"
	fi
	cat - << EOF
.TP
.B \\-${short}${formated_value}\\fR, \\fB\\-\\-${option}${formated_value}
$(echo "${description}"|__aeten_ads_man_inline_style)
EOF
}

__aeten_ads_api() {
	sed --quiet --regexp-extended 's/^aeten_ads_([[:alpha:]][[:alnum:]_-]+)\s*\(\)\s*\{/\1/p' "${*}" 2>/dev/null
}

__aeten_ads_is_api() {
	test 1 -eq $(__aeten_ads_api "${1}"|grep "^${2}$"|wc -l) 2>/dev/null
}

aeten_ads_cmd=${1}
if __aeten_ads_is_api ${0} ${aeten_ads_cmd}; then
   shift
   aeten_ads_${aeten_ads_cmd} "${@}"
   exit $?
# Allows script content inclusion
elif [ "$(basename $(readlink -f ${0}))" != 'ads' ]; then
   exit 1
fi

